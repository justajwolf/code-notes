// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Column = exports.Column = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Article = exports.Article = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ColumnResponse = exports.ColumnResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ColumnRequest = exports.ColumnRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineColumn()
defineArticle()
defineColumnResponse()
defineColumnRequest()

function defineColumn () {
  Column.encodingLength = encodingLength
  Column.encode = encode
  Column.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.int32.encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.column_cover)) throw new Error("column_cover is required")
    var len = encodings.string.encodingLength(obj.column_cover)
    length += 1 + len
    if (!defined(obj.column_title)) throw new Error("column_title is required")
    var len = encodings.string.encodingLength(obj.column_title)
    length += 1 + len
    if (!defined(obj.column_subtitle)) throw new Error("column_subtitle is required")
    var len = encodings.string.encodingLength(obj.column_subtitle)
    length += 1 + len
    if (!defined(obj.author_name)) throw new Error("author_name is required")
    var len = encodings.string.encodingLength(obj.author_name)
    length += 1 + len
    if (!defined(obj.author_intro)) throw new Error("author_intro is required")
    var len = encodings.string.encodingLength(obj.author_intro)
    length += 1 + len
    if (!defined(obj.column_intro)) throw new Error("column_intro is required")
    var len = encodings.string.encodingLength(obj.column_intro)
    length += 1 + len
    if (!defined(obj.column_unit)) throw new Error("column_unit is required")
    var len = encodings.string.encodingLength(obj.column_unit)
    length += 1 + len
    if (!defined(obj.sub_count)) throw new Error("sub_count is required")
    var len = encodings.varint.encodingLength(obj.sub_count)
    length += 1 + len
    if (!defined(obj.update_frequency)) throw new Error("update_frequency is required")
    var len = encodings.string.encodingLength(obj.update_frequency)
    length += 1 + len
    if (!defined(obj.column_price)) throw new Error("column_price is required")
    var len = encodings.varint.encodingLength(obj.column_price)
    length += 1 + len
    if (defined(obj.column_price_market)) {
      var len = encodings.varint.encodingLength(obj.column_price_market)
      length += 1 + len
    }
    if (defined(obj.articles)) {
      for (var i = 0; i < obj.articles.length; i++) {
        if (!defined(obj.articles[i])) continue
        var len = Article.encodingLength(obj.articles[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.int32.encode(obj.id, buf, offset)
    offset += encodings.int32.encode.bytes
    if (!defined(obj.column_cover)) throw new Error("column_cover is required")
    buf[offset++] = 18
    encodings.string.encode(obj.column_cover, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.column_title)) throw new Error("column_title is required")
    buf[offset++] = 26
    encodings.string.encode(obj.column_title, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.column_subtitle)) throw new Error("column_subtitle is required")
    buf[offset++] = 34
    encodings.string.encode(obj.column_subtitle, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.author_name)) throw new Error("author_name is required")
    buf[offset++] = 42
    encodings.string.encode(obj.author_name, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.author_intro)) throw new Error("author_intro is required")
    buf[offset++] = 50
    encodings.string.encode(obj.author_intro, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.column_intro)) throw new Error("column_intro is required")
    buf[offset++] = 58
    encodings.string.encode(obj.column_intro, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.column_unit)) throw new Error("column_unit is required")
    buf[offset++] = 66
    encodings.string.encode(obj.column_unit, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.sub_count)) throw new Error("sub_count is required")
    buf[offset++] = 72
    encodings.varint.encode(obj.sub_count, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.update_frequency)) throw new Error("update_frequency is required")
    buf[offset++] = 82
    encodings.string.encode(obj.update_frequency, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.column_price)) throw new Error("column_price is required")
    buf[offset++] = 88
    encodings.varint.encode(obj.column_price, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.column_price_market)) {
      buf[offset++] = 96
      encodings.varint.encode(obj.column_price_market, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.articles)) {
      for (var i = 0; i < obj.articles.length; i++) {
        if (!defined(obj.articles[i])) continue
        buf[offset++] = 106
        varint.encode(Article.encodingLength(obj.articles[i]), buf, offset)
        offset += varint.encode.bytes
        Article.encode(obj.articles[i], buf, offset)
        offset += Article.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      column_cover: "",
      column_title: "",
      column_subtitle: "",
      author_name: "",
      author_intro: "",
      column_intro: "",
      column_unit: "",
      sub_count: 0,
      update_frequency: "",
      column_price: 0,
      column_price_market: 0,
      articles: []
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    var found4 = false
    var found5 = false
    var found6 = false
    var found7 = false
    var found8 = false
    var found9 = false
    var found10 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3 || !found4 || !found5 || !found6 || !found7 || !found8 || !found9 || !found10) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        found0 = true
        break
        case 2:
        obj.column_cover = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        obj.column_title = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found2 = true
        break
        case 4:
        obj.column_subtitle = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found3 = true
        break
        case 5:
        obj.author_name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found4 = true
        break
        case 6:
        obj.author_intro = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found5 = true
        break
        case 7:
        obj.column_intro = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found6 = true
        break
        case 8:
        obj.column_unit = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found7 = true
        break
        case 9:
        obj.sub_count = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found8 = true
        break
        case 10:
        obj.update_frequency = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found9 = true
        break
        case 11:
        obj.column_price = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found10 = true
        break
        case 12:
        obj.column_price_market = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 13:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.articles.push(Article.decode(buf, offset, offset + len))
        offset += Article.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineArticle () {
  Article.encodingLength = encodingLength
  Article.encode = encode
  Article.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.is_video_preview)) throw new Error("is_video_preview is required")
    var len = encodings.bool.encodingLength(obj.is_video_preview)
    length += 1 + len
    if (!defined(obj.article_title)) throw new Error("article_title is required")
    var len = encodings.string.encodingLength(obj.article_title)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.is_video_preview)) throw new Error("is_video_preview is required")
    buf[offset++] = 16
    encodings.bool.encode(obj.is_video_preview, buf, offset)
    offset += encodings.bool.encode.bytes
    if (!defined(obj.article_title)) throw new Error("article_title is required")
    buf[offset++] = 26
    encodings.string.encode(obj.article_title, buf, offset)
    offset += encodings.string.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      is_video_preview: false,
      article_title: ""
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.is_video_preview = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        found1 = true
        break
        case 3:
        obj.article_title = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found2 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineColumnResponse () {
  ColumnResponse.encodingLength = encodingLength
  ColumnResponse.encode = encode
  ColumnResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.column)) throw new Error("column is required")
    var len = Column.encodingLength(obj.column)
    length += varint.encodingLength(len)
    length += 1 + len
    if (defined(obj.recommendColumns)) {
      for (var i = 0; i < obj.recommendColumns.length; i++) {
        if (!defined(obj.recommendColumns[i])) continue
        var len = Column.encodingLength(obj.recommendColumns[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.column)) throw new Error("column is required")
    buf[offset++] = 10
    varint.encode(Column.encodingLength(obj.column), buf, offset)
    offset += varint.encode.bytes
    Column.encode(obj.column, buf, offset)
    offset += Column.encode.bytes
    if (defined(obj.recommendColumns)) {
      for (var i = 0; i < obj.recommendColumns.length; i++) {
        if (!defined(obj.recommendColumns[i])) continue
        buf[offset++] = 18
        varint.encode(Column.encodingLength(obj.recommendColumns[i]), buf, offset)
        offset += varint.encode.bytes
        Column.encode(obj.recommendColumns[i], buf, offset)
        offset += Column.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      column: null,
      recommendColumns: []
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.column = Column.decode(buf, offset, offset + len)
        offset += Column.decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.recommendColumns.push(Column.decode(buf, offset, offset + len))
        offset += Column.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineColumnRequest () {
  ColumnRequest.encodingLength = encodingLength
  ColumnRequest.encode = encode
  ColumnRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.columnid)) throw new Error("columnid is required")
    var len = encodings.int32.encodingLength(obj.columnid)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.columnid)) throw new Error("columnid is required")
    buf[offset++] = 8
    encodings.int32.encode(obj.columnid, buf, offset)
    offset += encodings.int32.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      columnid: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.columnid = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
